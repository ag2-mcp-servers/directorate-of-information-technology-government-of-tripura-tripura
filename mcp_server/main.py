# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:58:18+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    ChcerCertificatePostRequest,
    ChcerCertificatePostResponse,
    ChcerCertificatePostResponse1,
    ChcerCertificatePostResponse2,
    ChcerCertificatePostResponse3,
    ChcerCertificatePostResponse4,
    ChcerCertificatePostResponse5,
    ChcerCertificatePostResponse6,
    DncerCertificatePostRequest,
    DncerCertificatePostResponse,
    DncerCertificatePostResponse1,
    DncerCertificatePostResponse2,
    DncerCertificatePostResponse3,
    DncerCertificatePostResponse4,
    DncerCertificatePostResponse5,
    DncerCertificatePostResponse6,
    DpcerCertificatePostRequest,
    DpcerCertificatePostResponse,
    DpcerCertificatePostResponse1,
    DpcerCertificatePostResponse2,
    DpcerCertificatePostResponse3,
    DpcerCertificatePostResponse4,
    DpcerCertificatePostResponse5,
    DpcerCertificatePostResponse6,
    FslcsCertificatePostRequest,
    FslcsCertificatePostResponse,
    FslcsCertificatePostResponse1,
    FslcsCertificatePostResponse2,
    FslcsCertificatePostResponse3,
    FslcsCertificatePostResponse4,
    FslcsCertificatePostResponse5,
    FslcsCertificatePostResponse6,
    GrredCertificatePostRequest,
    GrredCertificatePostResponse,
    GrredCertificatePostResponse1,
    GrredCertificatePostResponse2,
    GrredCertificatePostResponse3,
    GrredCertificatePostResponse4,
    GrredCertificatePostResponse5,
    GrredCertificatePostResponse6,
    IncerCertificatePostRequest,
    IncerCertificatePostResponse,
    IncerCertificatePostResponse1,
    IncerCertificatePostResponse2,
    IncerCertificatePostResponse3,
    IncerCertificatePostResponse4,
    IncerCertificatePostResponse5,
    IncerCertificatePostResponse6,
    IsoalCertificatePostRequest,
    IsoalCertificatePostResponse,
    IsoalCertificatePostResponse1,
    IsoalCertificatePostResponse2,
    IsoalCertificatePostResponse3,
    IsoalCertificatePostResponse4,
    IsoalCertificatePostResponse5,
    IsoalCertificatePostResponse6,
    LvcerCertificatePostRequest,
    LvcerCertificatePostResponse,
    LvcerCertificatePostResponse1,
    LvcerCertificatePostResponse2,
    LvcerCertificatePostResponse3,
    LvcerCertificatePostResponse4,
    LvcerCertificatePostResponse5,
    LvcerCertificatePostResponse6,
    MalcsCertificatePostRequest,
    MalcsCertificatePostResponse,
    MalcsCertificatePostResponse1,
    MalcsCertificatePostResponse2,
    MalcsCertificatePostResponse3,
    MalcsCertificatePostResponse4,
    MalcsCertificatePostResponse5,
    MalcsCertificatePostResponse6,
    MpkbyCertificatePostRequest,
    MpkbyCertificatePostResponse,
    MpkbyCertificatePostResponse1,
    MpkbyCertificatePostResponse2,
    MpkbyCertificatePostResponse3,
    MpkbyCertificatePostResponse4,
    MpkbyCertificatePostResponse5,
    MpkbyCertificatePostResponse6,
    ObcerCertificatePostRequest,
    ObcerCertificatePostResponse,
    ObcerCertificatePostResponse1,
    ObcerCertificatePostResponse2,
    ObcerCertificatePostResponse3,
    ObcerCertificatePostResponse4,
    ObcerCertificatePostResponse5,
    ObcerCertificatePostResponse6,
    RitinCertificatePostRequest,
    RitinCertificatePostResponse,
    RitinCertificatePostResponse1,
    RitinCertificatePostResponse2,
    RitinCertificatePostResponse3,
    RitinCertificatePostResponse4,
    RitinCertificatePostResponse5,
    RitinCertificatePostResponse6,
    RmcerCertificatePostRequest,
    RmcerCertificatePostResponse,
    RmcerCertificatePostResponse1,
    RmcerCertificatePostResponse2,
    RmcerCertificatePostResponse3,
    RmcerCertificatePostResponse4,
    RmcerCertificatePostResponse5,
    RmcerCertificatePostResponse6,
    RscerCertificatePostRequest,
    RscerCertificatePostResponse,
    RscerCertificatePostResponse1,
    RscerCertificatePostResponse2,
    RscerCertificatePostResponse3,
    RscerCertificatePostResponse4,
    RscerCertificatePostResponse5,
    RscerCertificatePostResponse6,
    ShcerCertificatePostRequest,
    ShcerCertificatePostResponse,
    ShcerCertificatePostResponse1,
    ShcerCertificatePostResponse2,
    ShcerCertificatePostResponse3,
    ShcerCertificatePostResponse4,
    ShcerCertificatePostResponse5,
    ShcerCertificatePostResponse6,
    SmcerCertificatePostRequest,
    SmcerCertificatePostResponse,
    SmcerCertificatePostResponse1,
    SmcerCertificatePostResponse2,
    SmcerCertificatePostResponse3,
    SmcerCertificatePostResponse4,
    SmcerCertificatePostResponse5,
    SmcerCertificatePostResponse6,
    SslcsCertificatePostRequest,
    SslcsCertificatePostResponse,
    SslcsCertificatePostResponse1,
    SslcsCertificatePostResponse2,
    SslcsCertificatePostResponse3,
    SslcsCertificatePostResponse4,
    SslcsCertificatePostResponse5,
    SslcsCertificatePostResponse6,
    VrwmiCertificatePostRequest,
    VrwmiCertificatePostResponse,
    VrwmiCertificatePostResponse1,
    VrwmiCertificatePostResponse2,
    VrwmiCertificatePostResponse3,
    VrwmiCertificatePostResponse4,
    VrwmiCertificatePostResponse5,
    VrwmiCertificatePostResponse6,
)

app = MCPProxy(
    description="eDistrict Tripura (http://edistrict.tripura.gov.in/) is the online service delivery portal for TripuraState Govt. Certain documents issued by it (e.g. Income, Caste Certificates etc) can be pulled into citizens' DigiLocker accounts.",
    termsOfService='https://apisetu.gov.in/terms.php',
    title='Directorate of Information Technology, Government of Tripura, Tripura',
    version='3.0.0',
    servers=[{'url': 'https://apisetu.gov.in/dittripura/v3'}],
)


@app.post(
    '/chcer/certificate',
    description=""" API to verify Character Certificate. """,
    tags=['certificate_application_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def chcer(body: ChcerCertificatePostRequest = None):
    """
    Character Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dncer/certificate',
    description=""" API to verify Distance Certificate. """,
    tags=['certificate_application_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def dncer(body: DncerCertificatePostRequest = None):
    """
    Distance Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/dpcer/certificate',
    description=""" API to verify Dependency Certificate. """,
    tags=['certificate_application_management', 'specialty_certificate_issuance'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def dpcer(body: DpcerCertificatePostRequest = None):
    """
    Dependency Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/fslcs/certificate',
    description=""" API to verify Food Stuff License. """,
    tags=['license_application_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def fslcs(body: FslcsCertificatePostRequest = None):
    """
    Food Stuff License
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/grred/certificate',
    description=""" API to verify Grievance Redressal/ Registration. """,
    tags=['grievance_handling'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def grred(body: GrredCertificatePostRequest = None):
    """
    Grievance Redressal/ Registration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/incer/certificate',
    description=""" API to verify Income Certificate. """,
    tags=['certificate_application_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def incer(body: IncerCertificatePostRequest = None):
    """
    Income Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/isoal/certificate',
    description=""" API to verify Issue of Arm Licence. """,
    tags=['license_application_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def isoal(body: IsoalCertificatePostRequest = None):
    """
    Issue of Arm Licence
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/lvcer/certificate',
    description=""" API to verify Land Valuation/ Holding/ Record Certificate. """,
    tags=['measurement_certificate_issuance'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def lvcer(body: LvcerCertificatePostRequest = None):
    """
    Land Valuation/ Holding/ Record Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/malcs/certificate',
    description=""" API to verify Manufacturer License. """,
    tags=['license_application_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def malcs(body: MalcsCertificatePostRequest = None):
    """
    Manufacturer License
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/mpkby/certificate',
    description=""" API to verify Small Savings Agent License. """,
    tags=['license_application_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def mpkby(body: MpkbyCertificatePostRequest = None):
    """
    Small Savings Agent License
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/obcer/certificate',
    description=""" API to verify OBC Certificate. """,
    tags=['specialty_certificate_issuance'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def obcer(body: ObcerCertificatePostRequest = None):
    """
    OBC Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ritin/certificate',
    description=""" API to verify Right to Information. """,
    tags=['certificate_application_management', 'specialty_certificate_issuance'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def ritin(body: RitinCertificatePostRequest = None):
    """
    Right to Information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rmcer/certificate',
    description=""" API to verify Marriage Certificate. """,
    tags=['specialty_certificate_issuance'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def rmcer(body: RmcerCertificatePostRequest = None):
    """
    Marriage Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rscer/certificate',
    description=""" API to verify Residence Certificate. """,
    tags=['certificate_application_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def rscer(body: RscerCertificatePostRequest = None):
    """
    Residence Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/shcer/certificate',
    description=""" API to verify SC/ST  Certificate. """,
    tags=['certificate_application_management', 'specialty_certificate_issuance'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def shcer(body: ShcerCertificatePostRequest = None):
    """
    SC/ST  Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/smcer/certificate',
    description=""" API to verify Surviving Member Certificate. """,
    tags=['certificate_application_management', 'specialty_certificate_issuance'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def smcer(body: SmcerCertificatePostRequest = None):
    """
    Surviving Member Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sslcs/certificate',
    description=""" API to verify Standardized Agency Systems (SAS) Agent License. """,
    tags=['license_application_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def sslcs(body: SslcsCertificatePostRequest = None):
    """
    Standardized Agency Systems (SAS) Agent License
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/vrwmi/certificate',
    description=""" API to verify License/ Verification of Weights, Measures and Instruments. """,
    tags=['measurement_certificate_issuance'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def vrwmi(body: VrwmiCertificatePostRequest = None):
    """
    License/ Verification of Weights, Measures and Instruments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
